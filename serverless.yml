service: iamauth

variablesResolutionMode: 20210326

plugins:
  - serverless-esbuild
  - serverless-s3-cleaner
  - serverless-iam-roles-per-function

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!.serverless/**'

custom:
  project: template
  baseName: ${self:custom.project}-${self:service}-${self:provider.stage}

  esbuild:
    target: node14
    packager: yarn
    minify: true
    sourcemap: true
  
  serverless-s3-cleaner:
    buckets:
      - ${cf:${self:custom.baseName}.ServerlessDeploymentBucketName, ''}

  serverless-iam-roles-per-function:
    defaultInherit: true
  

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.baseName}
  deploymentBucket:
    blockPublicAccess: true
  runtime: nodejs14.x
  memorySize: 128
  timeout: 25
  versionFunctions: false
  logRetentionInDays: 7
  logs:
    httpApi: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: "--enable-source-maps"
  httpApi:
    disableDefaultEndpoint: false
    shouldStartNameWithService: true
    cors:
      allowedOrigins: 
        - '*'
      allowedMethods:
        - GET
      allowedHeaders:
        - Content-Type
        - Authorization
  iam:
    role:
      name: ${self:custom.baseName}
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*

functions:
  query:
    name: ${self:custom.baseName}-query
    handler: src/index.handler
    events:
      - httpApi:
          path: /query/{id}
          method: GET
          authorizer:
            type: aws_iam


resources:
  Resources:

    # IAM

    ClientRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Ref AWS::AccountId
              Action: sts:AssumeRole
        Policies:
          - PolicyName: InvokeApi
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource:
                    - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/GET/query/*

    # SSM

    EndpointDomainParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/${self:service}/endpointUrl
        Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
        Type: String

    ClientRoleParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/${self:service}/clientRole
        Value: !GetAtt ClientRole.Arn
        Type: String
